@page "/"
@using Azure;
@using Azure.AI.Vision.Common;
@using Azure.AI.Vision.ImageAnalysis;
@using System;
@using System.IO;
@using System.Threading.Tasks;
@using OpenAI_API;
@using OpenAI_API.Images;
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h1>Computer Vision</h1>

<p> Insert URL or type prompt: </p>
<textarea @bind="urlOrPrompt" rows="1" cols="50" placeholder="Enter URL to analyze or prompt text to generate image."></textarea>
<button @onclick="AnalyzeImage">Analyze Image</button>
<button @onclick="GenerateImage">Generate Image</button>
<img src="@imageURL" alt="Image to analyze" width="300" height="300" />

<p>@caption</p>
<p>@jsonFromAnalysis</p>
<p>@captionFromAnalysis</p>

@code
{
  string urlOrPrompt = "";

  string caption = "";

  string jsonFromAnalysis = "";

  string captionFromAnalysis = "";


  string imageURL = "https://placehold.it/300x300";

  void OnInput(ChangeEventArgs e)
  { 
    urlOrPrompt = e.Value.ToString();
  }

  async void GenerateImage() 
  {         
            string endpoint = Environment.GetEnvironmentVariable("OPENAI_ENDPOINT");
            string key = Environment.GetEnvironmentVariable("OPENAI_API_KEY");
            OpenAIAPI client = new OpenAIAPI(new APIAuthentication(key));
            var result = await client.ImageGenerations.CreateImageAsync(new ImageGenerationRequest("BIRD", 1, ImageSize._256));

            // Image Generations responses provide URLs you can use to retrieve requested images
            string imageUri = result.Data[0].Url;
            imageURL = imageUri;
            StateHasChanged();
            // Print the image URI to console:
            Console.WriteLine(imageUri);
  }

  void AnalyzeImage()
  {
    var serviceOptions = new VisionServiceOptions(
    Environment.GetEnvironmentVariable("VISION_ENDPOINT"),
    new AzureKeyCredential(Environment.GetEnvironmentVariable("VISION_KEY")));

    using var imageSource = VisionSource.FromUrl(
    new Uri(urlOrPrompt));
    imageURL = urlOrPrompt;

    var analysisOptions = new ImageAnalysisOptions()
    {
    Features =
          ImageAnalysisFeature.CropSuggestions
        | ImageAnalysisFeature.Caption
        | ImageAnalysisFeature.DenseCaptions
        | ImageAnalysisFeature.Objects
        | ImageAnalysisFeature.People
        | ImageAnalysisFeature.Text
        | ImageAnalysisFeature.Tags
    };

    using var analyzer = new ImageAnalyzer(serviceOptions, imageSource, analysisOptions);

    var result = analyzer.Analyze();

    
    if (result.Reason == ImageAnalysisResultReason.Analyzed)
    {
      Console.WriteLine($" Image height = {result.ImageHeight}");
      Console.WriteLine($" Image width = {result.ImageWidth}");
      Console.WriteLine($" Model version = {result.ModelVersion}");

      if (result.Caption != null)
      {
          Console.WriteLine(" Caption:");
          Console.WriteLine($"   \"{result.Caption.Content}\", Confidence {result.Caption.Confidence:0.0000}");
          captionFromAnalysis = result.Caption.Content;
      }

      if (result.DenseCaptions != null)
      {
          Console.WriteLine(" Dense Captions:");
          foreach (var caption in result.DenseCaptions)
          {
              Console.WriteLine($"   \"{caption.Content}\", Bounding box {caption.BoundingBox}, Confidence {caption.Confidence:0.0000}");
          }
      }

      if (result.Objects != null)
      {
          Console.WriteLine(" Objects:");
          foreach (var detectedObject in result.Objects)
          {
              Console.WriteLine($"   \"{detectedObject.Name}\", Bounding box {detectedObject.BoundingBox}, Confidence {detectedObject.Confidence:0.0000}");
          }
      }

      if (result.Tags != null)
      {
          Console.WriteLine($" Tags:");
          foreach (var tag in result.Tags)
          {
              Console.WriteLine($"   \"{tag.Name}\", Confidence {tag.Confidence:0.0000}");
          }
      }

      if (result.People != null)
      {
          Console.WriteLine($" People:");
          foreach (var person in result.People)
          {
              Console.WriteLine($"   Bounding box {person.BoundingBox}, Confidence {person.Confidence:0.0000}");
          }
      }

      if (result.CropSuggestions != null)
      {
          Console.WriteLine($" Crop Suggestions:");
          foreach (var cropSuggestion in result.CropSuggestions)
          {
              Console.WriteLine($"   Aspect ratio {cropSuggestion.AspectRatio}: "
                  + $"Crop suggestion {cropSuggestion.BoundingBox}");
          };
      }

      if (result.Text != null)
      {
          Console.WriteLine($" Text:");
          foreach (var line in result.Text.Lines)
          {
              string pointsToString = "{" + string.Join(',', line.BoundingPolygon.Select(pointsToString => pointsToString.ToString())) + "}";
              Console.WriteLine($"   Line: '{line.Content}', Bounding polygon {pointsToString}");

              foreach (var word in line.Words)
              {
                  pointsToString = "{" + string.Join(',', word.BoundingPolygon.Select(pointsToString => pointsToString.ToString())) + "}";
                  Console.WriteLine($"     Word: '{word.Content}', Bounding polygon {pointsToString}, Confidence {word.Confidence:0.0000}");
              }
          }

      var resultDetails = ImageAnalysisResultDetails.FromResult(result);
      Console.WriteLine($" Result details:");
      Console.WriteLine($"   Image ID = {resultDetails.ImageId}");
      Console.WriteLine($"   Result ID = {resultDetails.ResultId}");
      Console.WriteLine($"   Connection URL = {resultDetails.ConnectionUrl}");
      Console.WriteLine($"   JSON result = {resultDetails.JsonResult}");
      jsonFromAnalysis = resultDetails.JsonResult;
    }
    else
    {
      var errorDetails = ImageAnalysisErrorDetails.FromResult(result);
      Console.WriteLine(" Analysis failed.");
      Console.WriteLine($"   Error reason : {errorDetails.Reason}");
      Console.WriteLine($"   Error code : {errorDetails.ErrorCode}");
      Console.WriteLine($"   Error message: {errorDetails.Message}");
    }
    }
  }
}
